# Generated by Django 4.2.7 on 2024-03-22 13:48

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creator', models.BigIntegerField(default=0)),
                ('receiver', models.BigIntegerField(default=0)),
                ('status', models.TextField(default='pending')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_id', models.BigIntegerField(unique=True)),
                ('username', models.CharField(max_length=12)),
                ('games_played', models.BigIntegerField(default=0)),
                ('games_lost', models.BigIntegerField(default=0)),
                ('games_won', models.BigIntegerField(default=0)),
                ('language', models.CharField(default='en', max_length=2)),
                ('friend_list', models.TextField(default='[]')),
                ('tournament_id', models.BigIntegerField(default=-1)),
                ('in_game', models.BooleanField(default=False)),
                ('avatar', models.TextField(default='')),
                ('tournaments_played', models.BigIntegerField(default=0)),
                ('tournaments_placements', models.TextField(default='[0, 0, 0]')),
            ],
        ),
        migrations.CreateModel(
            name='User42',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_id', models.BigIntegerField(unique=True)),
                ('id42', models.BigIntegerField(unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=9, unique=True)),
                ('avatar_url', models.URLField(blank=True, default='users/avatars/default.png')),
                ('token', models.TextField(default='')),
                ('refresh_token', models.TextField(default='')),
                ('token_created_at', models.BigIntegerField(default=0)),
                ('token_valid_until', models.BigIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('oauth_42', models.BooleanField(default=False)),
                ('token', models.TextField(default=None, null=True)),
                ('username', models.CharField(help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, null=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username.', 'invalid')], verbose_name='username')),
                ('email', models.EmailField(help_text='Required. Letters, digits and @/./+/-/_ only.', max_length=254, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid email address.', 'invalid')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
