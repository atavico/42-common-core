"""
Django settings for backdj project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from hvac import Client
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

def get_api_credentials(key_to_loop, api_key):
	vault_client = Client(url='https://vault:8200', verify=False)
	APPROLE_ROLE = os.environ.get('APPROLE_ROLE')
	APPROLE_SECRET = os.environ.get('APPROLE_SECRET')
	response = vault_client.auth.approle.login(
		role_id=APPROLE_ROLE,
		secret_id=APPROLE_SECRET,
	)

	response = vault_client.read('secret/django/' + api_key)

	if response and 'data' in response:
		credentials_data = response['data']
		if key_to_loop in credentials_data: return credentials_data
		else: raise Exception("Missing expected keys in the credentials data")
	else:
		raise Exception("Failed to retrieve oauth_api credentials from Vault")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECRET_KEY = get_api_credentials('djkey', 'djkey_api')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
TOKEN_REFRESH_AT_EVERY_LOGIN = False

IP_ADDR = os.environ.get("IP_ADDR", "0.0.0.0")
ALLOWED_HOSTS = [
	"0.0.0.0",
	"localhost",
	"127.0.0.1",
	IP_ADDR,
	]

CSRF_TRUSTED_ORIGINS = [f"https://{os.environ.get('IP_ADDR', 'localhost')}:4343"]
CSRF_COOKIE_SECURE = True

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True 

APP = "Django"

# Application definition

INSTALLED_APPS = [
	'daphne',
	'channels',
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'corsheaders',
	'rest_framework',
	'rest_framework.authtoken',
	'djangoapp',
	'users',
	'sslserver',
	'tournaments',
	'blockchain',
	'localhistory',
]

MIDDLEWARE = [
	"corsheaders.middleware.CorsMiddleware",
	"django.middleware.common.CommonMiddleware",
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	# 'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]



ROOT_URLCONF = 'backdj.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

# WSGI_APPLICATION = 'backdj.wsgi.application'
ASGI_APPLICATION = "backdj.asgi.application"

# Redis Channels implementation
REDIS_HOST = os.environ.get('REDIS_HOST', '127.0.0.1')
REDIS_PORT = os.environ.get('REDIS_PORT', 6379)

CHANNEL_LAYERS = {
	"default": {
		"BACKEND": "channels_redis.core.RedisChannelLayer",
		"CONFIG": {
			"hosts": [(REDIS_HOST, int(REDIS_PORT))],
			"capacity": 1500,  # default 100
			"expiry": 10,  # default 60
		},
		# "LOCATION": "redis://{}:{}/1".format(REDIS_HOST, REDIS_PORT),
		# "OPTIONS": {
		#     "CLIENT_CLASS": "django_redis.client.DefaultClient",
		# },
	},
}

# Daphne configuration
DAPHNE = {
	"ASGI_APPLICATION": ASGI_APPLICATION,
	"ENDPOINT": "0.0.0.0:8000",
	"SSL_KEYFILE": os.environ.get('DJANGO_TLS_KEY'),
	"SSL_CERTFILE": os.environ.get('DJANGO_TLS_CERT'),
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


vault_client = Client(url='https://vault:8200', verify=False)
#vault_client = Client(url='http://vault:8200', token=os.environ.get('VAULT_TOKEN'))
APPROLE_ROLE = os.environ.get('APPROLE_ROLE')
APPROLE_SECRET = os.environ.get('APPROLE_SECRET')
response = vault_client.auth.approle.login(
	role_id=APPROLE_ROLE,
	secret_id=APPROLE_SECRET,
)
if response.get("auth", {}).get("client_token"):
	# print("Authentication successful")
	vault_client.token = response["auth"]["client_token"]
else:
	pass
	# print("Authentication failed")

def get_database_credentials():
	response = vault_client.read('dbs/creds/mydb-admin')
	# print("[WARN  ]: Resetting postgres psw with vault")

	if response and 'data' in response:
		credentials_data = response['data']
		if 'username' in credentials_data and 'password' in credentials_data:
			return credentials_data
		else:
			raise Exception("Missing expected keys in the credentials data")
	else:
		raise Exception("Failed to retrieve database credentials from Vault")


db_credentials = get_database_credentials()
print(db_credentials)

DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.postgresql',
		'NAME': os.environ.get('POSTGRES_DB'),
		'USER': db_credentials['username'],
		'PASSWORD': db_credentials['password'],
		'HOST': os.environ.get('POSTGRES_HOSTNAME'),
		'PORT': os.environ.get('POSTGRES_PORT'),
		#'OPTIONS': {'assume_role': 'admin-owner'},
	}
}

# Rest Framework

REST_FRAMEWORK = {
	'DEFAULT_AUTHENTICATION_CLASSES': [
		'rest_framework.authentication.BasicAuthentication',
		'rest_framework.authentication.TokenAuthentication',
		# 'rest_framework.authentication.SessionAuthentication',
	]
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_USER_MODEL = 'users.User'
AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
MEDIA_ROOT = "/app/media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


APPEND_SLASH = False

# ----------------------------------------------- Blockchain

	
api_credentials = get_api_credentials('bc_url', 'blockchain_api')

BLOCK = {
	"url": api_credentials['bc_url'],
	"wallet": api_credentials["bc_wallet"],
	"key": api_credentials["bc_key"],
	"smart": api_credentials["bc_smart"],
	"balance": 0,
	"sepholia_eth_balance": 0,
}

BLOCKCHAIN_ID = 10000
