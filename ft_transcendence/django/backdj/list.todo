More Important The Any Other Task:
  ☐ refresh jwt token every new login (?)
  ☐ SQL injections/XSS check
  ✔ friend only @done (24-03-24 13:48)
  ✔ if user in game gets disconnected he looses the game automatically @done (24-03-24 13:53)
  ✔ fix tournament call -> resulting in an error if no tournaments played @done (24-03-24 11:52)
  ☐ if disconnected reconnection after login screen
  ✔ refresh the game screen one more time to send end score, it can be usefull @done (24-03-24 13:56)
  ☐ check before starting the game if the users are connected else autowin and go to the next one
  ☐ crash socket if a game ends while another is playing

Fix:
  
Observers:

1.) Standard User Management:

  Users can update their informations:
    ☐ update email

  User profiles display stats, such as wins and losses:
  

--- ✄ -----------------------
Archive:
 ✔ implement img in the profile, base64 @done (3/7/2024, 4:36:37 PM) @project(More Important The Any Other Task)
 ✔ fix and check why 1vs1 matches gets countend in tournaments played @done (24-03-24 10:36) @project(More Important The Any Other Task)
 ✔ do user reconnect to tournament @done (24-03-24 09:24) @project(More Important The Any Other Task)
 ✔ send back the list to a player that reenter the tournament @done (24-03-24 09:13) @project(Observers)
 ✔ fix leaving queue keeps the game on @done (24-03-24 09:11) @project(More Important The Any Other Task)
 ✔ observer needs to be directed into game or match @done (24-03-23 16:23) @project(More Important The Any Other Task)
 ✔ if no player remain in tournament delete tournament (?) @done (24-03-23 16:23) @project(More Important The Any Other Task)
 ✘ user disconnection wait 60 secs if in game, check if active too if disconnected and next game includes him @cancelled (24-03-23 13:25) @project(More Important The Any Other Task)
 ✔ delete tournament from games if 1vs1 @done (24-03-23 13:24) @project(More Important The Any Other Task)
 ✔ set tournament finished if 1vs1 end @done (24-03-23 12:35) @project(More Important The Any Other Task)
 ✔ increase tournament placements @done (24-03-22 10:15) @project(More Important The Any Other Task)
 ✔ increase lost won games @done (24-03-22 08:20) @project(More Important The Any Other Task)
 ✔ increase them in a secure way @done (24-03-22 08:17) @project(1.) Standard User Management / User profiles display stats, such as wins and losses)
 ✔ remove in_game status if tournament is finished at relogin @done (24-03-22 08:14) @project(More Important The Any Other Task)
 ✔ placement doesn't work @done (24-03-22 08:03) @project(Fix)
 ✔ remove in_game status from user at tournament end @done (24-03-22 08:01) @project(More Important The Any Other Task)
 ✔ add fields to get player (tournament stats) @done (24-03-22 07:52) @project(More Important The Any Other Task)
 ✔ add data to db at tournament end @done (24-03-22 07:48) @project(More Important The Any Other Task)
 ✘ unexpected disconnection solved by paused game waiting for reaccess @cancelled (24-03-21 21:40) @project(1.) Remote Players / Network Issues)
 ✘ if the user doesn't come back in X seconds automatically win the match @cancelled (24-03-21 21:40) @project(1.) Remote Players / Network Issues)
 ✔ fill it with a date, the score and the players id [create the value server side after every game] @done (24-03-21 21:40) @project(1.) Standard User Management / Each user has a Match History including 1vs1 games, dates, and relevant details, accessible to logged-in users)
 ✔ Tournaments and 1vs1 remote players @done (24-03-21 21:40) @project(1.) Remote Players)
 ✔ Integrate the server-side Pong game with the web application, allowing users to play the game directly on the website @done (24-03-21 21:40) @project(1.) Server Side Pong)
 ✔ Ensure that the server-side Pong game is responsive, providing an engaging and enjoyable gaming experience @done (24-03-21 21:39) @project(1.) Server Side Pong)
 ✔ Develop server-side logic for the Pong game to handle gameplay, ball movement, scoring, and player interactions @done (24-03-21 21:39) @project(1.) Server Side Pong)
 ✔ Design and implement the API endpoints to support game initialization, player controls, and game state updates @done (24-03-21 21:39) @project(1.) Server Side Pong)
 ✔ Create an API that exposes the necessary resources and endpoints to interact with the Pong game, allowing partial usage of the game via the Command-Line-Interface (CLI) and web interface @done (24-03-21 21:39) @project(1.) Server Side Pong)
 ✔ end status in a tournament @done (24-03-21 16:42) @project(More Important The Any Other Task)
 ✔ 3 players may trigger 3rd 4th place game anyway @done (24-03-21 13:00) @project(More Important The Any Other Task)
 ✔ fix multiple games at the same time @done (24-03-20 23:35) @project(More Important The Any Other Task)
 ✔ add game to history after every match @done (24-03-20 23:15) @project(More Important The Any Other Task)
 ✔ check password @done (24-03-20 10:01) @project(New Things / Create the Tournament socket)
 ✔ check if user can play (password etc..) or is an observer @done (24-03-20 10:01) @project(New Things / Create the Tournament socket)
 ✔ remove avatar from sockets @done (24-03-20 09:53) @project(More Important The Any Other Task)
 √ insert a list in Game so you can send them to the player if got disconnected and reenter the socket @done (24-03-18 16:22) @project(More Important The Any Other Task / Observers)
 ✘ on user registration or name changed resend name/id list @cancelled (24-03-18 16:16) @project(More Important The Any Other Task)
 √ leave @done (24-03-18 16:16) @project(More Important The Any Other Task / Observers)
 √ enter @done (24-03-18 16:16) @project(More Important The Any Other Task / Observers)
 √ automatically win the match if first user has no opponent @done (24-03-18 11:38) @project(More Important The Any Other Task)
 √ save tournament data in db after every match @done (24-03-18 11:35) @project(More Important The Any Other Task)
 √ add + to angle based on the distance of paddle center @done (24-03-16 16:57) @project(New Things)
 √ test paddles bounce @done (24-03-16 16:56) @project(New Things)
 √ add paddles movement @done (24-03-16 16:56) @project(New Things)
 √ Test ball movement @done (24-03-16 16:56) @project(New Things)
 ✔ Player tournaments win and placements (played, won, second, third) @done (24-03-15 07:43) @project(New Things)
 ✘ add media folder for avatars @cancelled (24-03-14 15:51) @project(1.) Standard User Management / Users can upload an avatar, with a default option if none is provided)
 √ upload avatar @done (24-03-14 15:51) @project(1.) Standard User Management / Users can upload an avatar, with a default option if none is provided)
 √ update name @done (24-03-14 15:51) @project(1.) Standard User Management / Users can update their informations)
 √ update avatar @done (24-03-14 15:51) @project(1.) Standard User Management / Users can upload an avatar, with a default option if none is provided)
 √ front end need to check that list to check if friend is active @done (24-03-14 15:51) @project(1.) Standard User Management / Users can add others as friends and view their online status)
 √ add it from frontend (append new user id to the list) @done (24-03-14 15:51) @project(1.) Standard User Management / Users can add others as friends and view their online status / Add friend)
 √ friend request action @done (24-03-14 15:50) @project(Activity Socket)
 √ friend added action @done (24-03-14 15:50) @project(Activity Socket)
 √ delete player action @done (24-03-13 17:24) @project(Activity Socket)
 √ delete friend action @done (24-03-13 17:24) @project(Activity Socket)
 √ -delete account- request @done (24-03-13 13:00) @project(More Important The Any Other Task)
 √ -delete friend- request @done (24-03-13 11:19) @project(More Important The Any Other Task)
 √ cannot login if already in (do it with the socket) @done (24-03-13 10:29) @project(More Important The Any Other Task)
 √ create methods to end the game @done (24-03-12 17:18) @project(New Things / Create the Tournament socket / Game (class))
 √ divide queryset @done (24-03-12 15:58) @project(New Things / Create the Tournament socket)
 √ start the game loop or add the game to the processable games @done (24-03-12 15:55) @project(New Things / Create the Tournament socket / Game (class) / Start the tournament loop)
 √ create main loop @done (24-03-12 15:49) @project(New Things / Create the Tournament socket / Game (class))
 √ set started status in database when all users are ready @done (24-03-12 09:53) @project(New Things / Create the Tournament socket / Game (class) / Start the tournament loop)
 √ set player status in game in db (with tournament id too) @done (24-03-12 09:53) @project(New Things / Create the Tournament socket / Game (class) / Start the tournament loop)
 √ Change the game list structure, make it a dict with all positions signed ({"finals": [(None, None), (None (3rd), None (4th))], "semi-final": [(None, None), (None, None)], "quarters": [(0, 1), (2, 3), (4, 5), (6, 7)]}) @done (24-03-11 09:44) @project(New Things / Create the Tournament socket / Game (class))
 √ send them back via socket @done (24-03-11 08:26) @project(New Things / Create the Tournament socket / Game (class))
 √ implement 42 img @done (24-03-10 11:59) @project(More Important The Any Other Task)
 √ socket get the user list @done (24-03-09 18:30) @project(New Things / Create the Tournament socket)
 √ on connection send the new connected player to all @done (24-03-09 18:30) @project(New Things / Create the Tournament socket)
 √ check ready status @done (24-03-09 18:30) @project(New Things / Create the Tournament socket / Game (class) / Start the tournament loop)
 √ Tournament observables, insert a started <bool> field @done (24-03-08 16:49) @project(New Things / Fix)
 √ Tournament password field in matches as bool if a password is present @done (24-03-08 16:47) @project(New Things / Fix)
 √ set active players @done (24-03-08 16:09) @project(New Things / Create the Tournament socket / Game (class) / Start the tournament loop)
 √ socket change name in users activity @done (24-03-08 13:10) @project(More Important The Any Other Task)
 √ set players status @done (24-03-08 13:09) @project(New Things / Create the Tournament socket / Game (class))
 √ add variables relative to active game @done (24-03-07 17:42) @project(New Things / Create the Tournament socket)
 √ add input reading @done (24-03-07 17:42) @project(New Things / Create the Tournament socket)
 √ randomize games @done (24-03-07 17:40) @project(New Things / Create the Tournament socket / Game (class))
 √ set players to be ready @done (24-03-07 17:39) @project(New Things / Create the Tournament socket / Game (class))
 √ create methods to score @done (24-03-07 17:38) @project(New Things / Create the Tournament socket / Game (class))
 √ create methods to move and speed up the ball @done (24-03-07 17:38) @project(New Things / Create the Tournament socket / Game (class))
 √ create methods to init the game (even after score set) @done (24-03-07 17:38) @project(New Things / Create the Tournament socket / Game (class))
 √ create a match class @done (24-03-07 17:37) @project(New Things / Create the Tournament socket / Game (class))
 √ create a Game class @done (24-03-07 17:37) @project(New Things / Create the Tournament socket / Game (class))
 √ Tournament gets created twice @done (24-03-07 17:37) @project(New Things / Fix)
 √ fix serializer data doesn't get saved @done (24-02-23 19:12) @project(New Things / Friend Requests)
 √ make will now delete <none> tagged containers or images to prevent "max depth exceeded" @done (24-02-23 18:11) @project(New Things / docker)
 √ remove django-back from daphne log and similar with our django calls @done (24-02-23 18:10) @project(New Things / Logger)
 √ complete @done (24-02-23 18:09) @project(New Things / Friend Requests)
 ✘ user friendly setup for enabling 2FA, with options for SMS codes, authenticator apps or email-based verification @cancelled (24-02-16 16:35) @project(1.) Implement Two-Factor Authentication (2FA) and JWT)
 ✘ add python3-dev installation (apt install python3-dev) @cancelled (24-02-16 16:35) @project(Bugs or things to fix)
 ✘ a secondary verification method such as a one-time code @cancelled (24-02-16 16:35) @project(1.) Implement Two-Factor Authentication (2FA) and JWT)
 ✘ Ensure that JWT tokens are issued and validated securely to prevent unauthorized access to user accounts and sensitive data @cancelled (24-02-16 16:35) @project(1.) Implement Two-Factor Authentication (2FA) and JWT)
 √ send back them to front end @done (24-02-16 16:34) @project(1.) Standard User Management / User profiles display stats, such as wins and losses)
 √ integrate the authentication system allowing users to securely sign in @done (24-02-16 16:34) @project(1.) Implementing a remote authentication)
 √ Obtain the necessary credentials and permissions from the authority to enable a secure login (tokens) @done (24-02-16 16:34) @project(1.) Implementing a remote authentication)
 √ OAuth 2.0 authentication with 42 @done (24-02-16 16:34) @project(1.) Implementing a remote authentication)
 √ JWT @done (24-02-16 16:34) @project(1.) Implement Two-Factor Authentication (2FA) and JWT)
 √ Implement user-friendly login and authorization flows that adhere to best practices and security standards @done (24-02-16 16:34) @project(1.) Implementing a remote authentication)
 √ Ensure the secure exchange og authentication tokens and user information between the web application and the authentication provider. @done (24-02-16 16:34) @project(1.) Implementing a remote authentication)
 √ websocket to tell last timestamp being active, if no more in like 10 seconds push out @done (24-02-16 16:33) @project(1.) Standard User Management / Users can add others as friends and view their online status)
 √ missing registration request from frontend @done (24-02-16 16:33) @project(1.) Standard User Management / Users can subscribe to the site in a secure way)
 √ missing front end part @done (24-02-16 16:33) @project(1.) Standard User Management / Registered users can log in in a secure way)
 √ At registration create a row also in user with default fields @done (24-02-16 16:33) @project(1.) Standard User Management / Users can subscribe to the site in a secure way)
 √ make the socket nameable (use tournament id) @done (24-02-15 13:03) @project(New Things / Create the Tournament socket)
 √ accept connections @done (24-02-15 13:03) @project(New Things / Create the Tournament socket)
 √ move Websockets urls to the routing backdj folder @done (24-02-15 11:46) @project(New Things)
 ✘ tournament_name field in Player @cancelled (24-01-01 11:26) @project(1.) Standard User Management / Users can select a unique display name to play the tournaments)
 ✔ update method in APIs @done (24-01-01 11:26) @project(1.) Standard User Management / Users can select a unique display name to play the tournaments)
 ✔ should be accessed from front end from any user (API) @done (24-01-01 10:22) @project(1.) Standard User Management / Each user has a Match History including 1vs1 games, dates, and relevant details, accessible to logged-in users)
 ✔ A table for History @done (23-12-29 17:32) @project(1.) Standard User Management / Each user has a Match History including 1vs1 games, dates, and relevant details, accessible to logged-in users)
 ✔ add fields for games won and lost @done (23-12-29 17:31) @project(1.) Standard User Management / User profiles display stats, such as wins and losses)
 ✔ update (put) as request @done (23-12-29 17:30) @project(1.) Standard User Management / Users can add others as friends and view their online status / Add friend)
 ✔ default option in Player generation @done (23-12-29 17:26) @project(1.) Standard User Management / Users can upload an avatar, with a default option if none is provided)
 ✔ Authing system done by django @done (23-12-29 17:22) @project(1.) Standard User Management / Users can subscribe to the site in a secure way)
 ✔ Add a Tournament model @done (23-12-29 17:15) @project(Models)
 ✔ Add a Player model @done (23-12-29 17:15) @project(Models)
 ✔ Add a GamesHistory model @done (23-12-29 17:15) @project(Models)
 ✔ avoid installing backports.zoneinfo if python > 3.9 @done (23-12-29 10:02) @project(Bugs or things to fix)
